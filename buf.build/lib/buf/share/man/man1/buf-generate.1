.nh
.TH "Buf" "1" "Sep 2022" "Auto generated by spf13/cobra" ""

.SH NAME
.PP
buf-generate - Generate stubs for protoc plugins using a template.


.SH SYNOPSIS
.PP
\fBbuf generate  [flags]\fP


.SH DESCRIPTION
.PP
Generate stubs for protoc plugins using a template.

.PP
This command uses a template file of the shape:


.SH The version of the generation template.

.SH Required.

.SH The valid values are v1beta1, v1.
.PP
version: v1


.SH The plugins to run. One of "name" and "remote" is required.
.PP
plugins:
    # The name of the plugin.
    # By default, buf generate will look for a binary named protoc-gen-NAME on your $PATH.
    # Alternatively, use a remote reference:
    # remote: buf.build/protocolbuffers/plugins/go:v1.27.0-1
  - name: go
    # The the relative output directory.
    # Required.
    out: gen/go
    # Any options to provide to the plugin.
    # This can be either a single string or a list of strings.
    # Optional.
    opt: paths=source_relative
    # The custom path to the plugin binary, if not protoc-gen-NAME on your $PATH.
    # Optional, and exclusive with "remote".
    path: custom-gen-go
    # The generation strategy to use. There are two options:
    #
    # 1. "directory"
    #
    #   This will result in buf splitting the input files by directory, and making separate plugin
    #   invocations in parallel. This is roughly the concurrent equivalent of:
    #
    #     for dir in $(find . -name '\fI\&.proto' -print0 | xargs -0 -n1 dirname | sort | uniq); do
    #       protoc -I . $(find "${dir}" -name '\fP\&.proto')
    #     done
    #
    #   Almost every Protobuf plugin either requires this, or works with this,
    #   and this is the recommended and default value.
    #
    # 2. "all"
    #
    #   This will result in buf making a single plugin invocation with all input files.
    #   This is roughly the equivalent of:
    #
    #     protoc -I . $(find . -name '*.proto')
    #
    #   This is needed for certain plugins that expect all files to be given at once.
    #
    # If omitted, "directory" is used. Most users should not need to set this option.
    # Optional.
    strategy: directory
  - name: java
    out: gen/java
    # Use the plugin hosted at buf.build/protocolbuffers/plugins/python at version v3.17.0-1.
    # If version is omitted, uses the latest version of the plugin.
  - remote: buf.build/protocolbuffers/plugins/python:v3.17.0-1
    out: gen/python

.PP
As an example, here's a typical "buf.gen.yaml" go and grpc, assuming
"protoc-gen-go" and "protoc-gen-go-grpc" are on your "$PATH":

.PP
version: v1
plugins:
  - name: go
    out: gen/go
    opt: paths=source_relative
  - name: go-grpc
    out: gen/go
    opt: paths=source_relative,require_unimplemented_servers=false

.PP
By default, buf generate will look for a file of this shape named
"buf.gen.yaml" in your current directory. This can be thought of as a template
for the set of plugins you want to invoke.

.PP
The first argument is the source, module, or image to generate from.
If no argument is specified, defaults to ".".

.PP
Call with:


.SH uses buf.gen.yaml as template, current directory as input
.PP
$ buf generate


.SH same as the defaults (template of "buf.gen.yaml", current directory as input)
.PP
$ buf generate --template buf.gen.yaml .


.SH --template also takes YAML or JSON data as input, so it can be used without a file
.PP
$ buf generate --template '{"version":"v1","plugins":[{"name":"go","out":"gen/go"}]}'


.SH download the repository and generate code stubs per the bar.yaml template
.PP
$ buf generate --template bar.yaml https://github.com/foo/bar.git


.SH generate to the bar/ directory, prepending bar/ to the out directives in the template
.PP
$ buf generate --template bar.yaml -o bar https://github.com/foo/bar.git

.PP
The paths in the template and the -o flag will be interpreted as relative to your
current directory, so you can place your template files anywhere.

.PP
If you only want to generate stubs for a subset of your input, you can do so via the --path flag:


.SH Only generate for the files in the directories proto/foo and proto/bar
.PP
$ buf generate --path proto/foo --path proto/bar


.SH Only generate for the files proto/foo/foo.proto and proto/foo/bar.proto
.PP
$ buf generate --path proto/foo/foo.proto --path proto/foo/bar.proto


.SH Only generate for the files in the directory proto/foo on your GitHub repository
.PP
$ buf generate --template buf.gen.yaml https://github.com/foo/bar.git --path proto/foo

.PP
Note that all paths must be contained within the same module. For example, if you have a
module in "proto", you cannot specify "--path proto", however "--path proto/foo" is allowed
as "proto/foo" is contained within "proto".

.PP
Plugins are invoked in the order they are specified in the template, but each plugin
has a per-directory parallel invocation, with results from each invocation combined
before writing the result.

.PP
Insertion points are processed in the order the plugins are specified in the template.


.SH OPTIONS
.PP
\fB--config\fP=""
	The file or data to use for configuration.

.PP
\fB--disable-symlinks\fP[=false]
	Do not follow symlinks when reading sources or configuration from the local filesystem.
By default, symlinks are followed in this CLI, but never followed on the Buf Schema Registry.
Symlinks are never followed in Windows.

.PP
\fB--error-format\fP="text"
	The format for build errors, printed to stderr. Must be one of [text,json,msvs,junit].

.PP
\fB--exclude-path\fP=[]
	Exclude specific files or directories, for example "proto/a/a.proto" or "proto/a".
If specified multiple times, the union is taken.

.PP
\fB-h\fP, \fB--help\fP[=false]
	help for generate

.PP
\fB--include-imports\fP[=false]
	Also generate all imports except for Well-Known Types.

.PP
\fB--include-wkt\fP[=false]
	Also generate Well-Known Types. Cannot be set without --include-imports.

.PP
\fB-o\fP, \fB--output\fP="."
	The base directory to generate to. This is prepended to the out directories in the generation template.

.PP
\fB--path\fP=[]
	Limit to specific files or directories, for example "proto/a/a.proto" or "proto/a".
If specified multiple times, the union is taken.

.PP
\fB--template\fP=""
	The generation template file or data to use. Must be in either YAML or JSON format.


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB--debug\fP[=false]
	Turn on debug logging.

.PP
\fB--log-format\fP="color"
	The log format [text,color,json].

.PP
\fB--timeout\fP=2m0s
	The duration until timing out.

.PP
\fB-v\fP, \fB--verbose\fP[=false]
	Turn on verbose mode.


.SH SEE ALSO
.PP
\fBbuf(1)\fP


.SH HISTORY
.PP
14-Sep-2022 Auto generated by spf13/cobra
